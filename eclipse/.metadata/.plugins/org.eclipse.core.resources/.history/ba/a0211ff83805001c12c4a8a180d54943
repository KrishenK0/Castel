package fr.krishenk.castel;

import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.EventHandler;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.SidedProxy;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.network.NetworkRegistry;
import cpw.mods.fml.common.network.simpleimpl.SimpleNetworkWrapper;
import cpw.mods.fml.common.registry.EntityRegistry;
import cpw.mods.fml.relauncher.Side;
import fr.krishenk.castel.client.GenericMessage;
import fr.krishenk.castel.client.entity.EntityOrb;
import fr.krishenk.castel.server.CommonProxy;
import fr.krishenk.castel.server.customItems;

@Mod(modid = Castel.MODID, name = "Castel", version = "1.0")
public class Castel {
	
	public static boolean UseUniqueEntities = true;
	public static int EntityStartId = 120;
	
	public static SimpleNetworkWrapper network;
	
	
	@SidedProxy(clientSide = "fr.krishenk.castel.client.ClientProxy", serverSide = "fr.krishenk.castel.server.CommonProxy")
	public static CommonProxy proxy;
	
	@Instance(Castel.MODID)
	public static Castel INSTANCE;
	
	public Castel() {
		INSTANCE = this;
	}
	
	public final static String MODID = "castel";
	
	@EventHandler
	public void preInit(FMLPreInitializationEvent e) {	
		network	= NetworkRegistry.INSTANCE.newSimpleChannel(Castel.MODID);
		network.registerMessage(GenericMessage.Handler.class, GenericMessage.class, 0, Side.CLIENT);
		
		customItems.load();
		proxy.load();
		int thowid = getEntityId();
		EntityRegistry.registerGlobalEntityID(EntityOrb.class, "throwableitem", thowid);
		EntityRegistry.registerModEntity(EntityOrb.class, "throwableitem", thowid, this, 64, 3, true);
		
	}
	
	@EventHandler
	public void init(FMLInitializationEvent e) {
	}
	
	@EventHandler
	public void postInit(FMLPostInitializationEvent e) {
		
	}
	
	public static int getEntityId() {
		return UseUniqueEntities?EntityRegistry.findGlobalUniqueEntityId():EntityStartId++;
	}

	

}
